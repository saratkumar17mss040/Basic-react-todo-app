{"version":3,"sources":["NewTodoForm.js","TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","onSubmit","formSubmitted","htmlFor","onChange","newTodoChanged","id","name","value","newTodo","type","TodoItem","todo","index","event","toggleTodoDone","checked","done","className","title","onClick","removeTodo","TodoList","todos","map","key","App","state","message","this","setState","target","preventDefault","splice","console","log","bind","allDone","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"kPAmBeA,EAhBK,SAACC,GACjB,OAEI,0BAAMC,SAAUD,EAAME,eAClB,2BAAOC,QAAQ,WAAf,YACA,2BACIC,SAAUJ,EAAMK,eAChBC,GAAG,UACHC,KAAK,UACLC,MAAOR,EAAMS,UAEjB,4BAAQC,KAAK,UAAb,cCEGC,EAfE,SAACX,GAAW,IACjBY,EAAeZ,EAAfY,KAAKC,EAAUb,EAAVa,MACb,OAAQ,4BACJ,2BACIT,SAAU,SAACU,GAAD,OAAWd,EAAMe,eAAeD,EAAOD,IACjDH,KAAK,WACLM,QAAShB,EAAMY,KAAKK,OAGxB,0BAAMC,UAAWN,EAAKK,KAAO,OAAS,IAAKL,EAAKO,OAChD,4BAAQC,QAAS,kBAAMpB,EAAMqB,WAAWR,KAAxC,YCQOS,EAhBC,SAACtB,GAChB,OACC,4BACEA,EAAMuB,MAAMC,KAAI,SAACZ,EAAMC,GACvB,OAAQ,kBAAC,EAAD,CACPY,IAAKZ,EACLA,MAAOA,EACPD,KAAMA,EACNG,eAAgBf,EAAMe,eACtBM,WAAYrB,EAAMqB,kBCmGRK,G,wDAxGd,aAAe,IAAD,8BACb,gBAEKC,MAAQ,CACZC,QAAS,kCACTnB,QAAS,GACTc,MAAO,CACN,CACCJ,MAAO,cACPF,MAAM,GAEP,CACCE,MAAO,YACPF,MAAM,KAbI,E,2DAqBCH,GAEde,KAAKC,SAAS,CACbrB,QAASK,EAAMiB,OAAOvB,U,oCAIVM,GACbA,EAAMkB,iBAENH,KAAKC,SAAS,CACbrB,QAAS,GACTc,MAAM,GAAD,mBACDM,KAAKF,MAAMJ,OADV,CAEJ,CACCJ,MAAOU,KAAKF,MAAMlB,QAClBQ,MAAM,S,iCAMCJ,GACV,IAAMU,EAAK,YAAOM,KAAKF,MAAMJ,OAC7BA,EAAMU,OAAOpB,EAAO,GACpBgB,KAAKC,SAAS,CACbP,Y,qCAIaT,EAAOD,GACrBqB,QAAQC,IAAIrB,EAAMiB,OAAOf,SAEzB,IAAMO,EAAK,YAAOM,KAAKF,MAAMJ,OAE7BA,EAAMV,GAAN,2BACIU,EAAMV,IADV,IAECI,KAAMH,EAAMiB,OAAOf,UAIpBkB,QAAQC,IAAIZ,GACZM,KAAKC,SAAS,CACbP,Y,gCAKD,IAAMA,EAAQM,KAAKF,MAAMJ,MAAMC,KAAI,SAACZ,GACnC,MAAO,CAENO,MAAOP,EAAKO,MACZF,MAAM,MAIRY,KAAKC,SAAS,CACbP,Y,+BAIQ,IAAD,OACR,OACC,yBAAKL,UAAU,OACd,4BAAKW,KAAKF,MAAMC,SAEhB,kBAAC,EAAD,CAECnB,QAASoB,KAAKF,MAAMlB,QACpBP,cAAe2B,KAAK3B,cAAckC,KAAKP,MACvCxB,eAAgBwB,KAAKxB,eAAe+B,KAAKP,QAE1C,4BAAQT,QAAS,kBAAM,EAAKiB,YAA5B,YACA,kBAAC,EAAD,CACCd,MAAOM,KAAKF,MAAMJ,MAClBR,eAAgBc,KAAKd,eAAeqB,KAAKP,MACzCR,WAAYQ,KAAKR,WAAWe,KAAKP,a,GAlGpBS,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAM5B,a","file":"static/js/main.7763fd63.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// props are nothing but a way to pass data down\r\nconst NewTodoForm = (props) => {\r\n    return (\r\n        // pass the events automatically\r\n        <form onSubmit={props.formSubmitted}>\r\n            <label htmlFor=\"newTodo\">New Todo</label>\r\n            <input\r\n                onChange={props.newTodoChanged}\r\n                id=\"newTodo\"\r\n                name=\"newTodo\"\r\n                value={props.newTodo}\r\n            ></input>\r\n            <button type=\"submit\">Add Todo</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default NewTodoForm;","import React from 'react';\r\nconst TodoItem = (props) => {\r\n    const { todo,index } = props;\r\n    return (<li>\r\n        <input\r\n            onChange={(event) => props.toggleTodoDone(event, index)}\r\n            type=\"checkbox\"\r\n            checked={props.todo.done}\r\n        />\r\n        {/* <span style={{ textDecoration: todo.done ? 'line-through' : 'inherit' }}>{todo.title}</span> */}\r\n        <span className={todo.done ? 'done' : ''}>{todo.title}</span>\r\n        <button onClick={() => props.removeTodo(index)}>Remove</button>\r\n    </li>);\r\n}\r\n\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nconst TodoList= (props) => {\r\n\treturn (\r\n\t\t<ul>\r\n\t\t\t{props.todos.map((todo, index) => {\r\n\t\t\t\treturn (<TodoItem\r\n\t\t\t\t\tkey={index}\r\n\t\t\t\t\tindex={index}\r\n\t\t\t\t\ttodo={todo}\r\n\t\t\t\t\ttoggleTodoDone={props.toggleTodoDone}\r\n\t\t\t\t\tremoveTodo={props.removeTodo}\r\n\t\t\t\t/>);\r\n\t\t\t})}\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default TodoList;","import React, { Component } from 'react';\nimport NewTodoForm from './NewTodoForm';\nimport TodoList from './TodoList';\nimport './App.css';\n\n// top level component - App\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\t// appication data\n\t\tthis.state = {\n\t\t\tmessage: 'Hello  i am sarath from react !',\n\t\t\tnewTodo: '',\n\t\t\ttodos: [\n\t\t\t\t{\n\t\t\t\t\ttitle: 'learn react',\n\t\t\t\t\tdone: false,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttitle: 'learn vue',\n\t\t\t\t\tdone: false,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t\t// or use this to bind\n\t\t// this.formSubmitted = this.formSubmitted.bind(this);\n\t}\n\n\tnewTodoChanged(event) {\n\t\t// console.log(event.target.value);\n\t\tthis.setState({\n\t\t\tnewTodo: event.target.value,\n\t\t});\n\t}\n\n\tformSubmitted(event) {\n\t\tevent.preventDefault();\n\t\t// console.log(this.state.newTodo);\n\t\tthis.setState({\n\t\t\tnewTodo: '',\n\t\t\ttodos: [\n\t\t\t\t...this.state.todos,\n\t\t\t\t{\n\t\t\t\t\ttitle: this.state.newTodo,\n\t\t\t\t\tdone: false,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\tremoveTodo(index) {\n\t\tconst todos = [...this.state.todos];\n\t\ttodos.splice(index, 1);\n\t\tthis.setState({\n\t\t\ttodos,\n\t\t});\n\t}\n\n\ttoggleTodoDone(event, index) {\n\t\tconsole.log(event.target.checked);\n\t\t//  shallow copy -the array\n\t\tconst todos = [...this.state.todos];\n\t\t// copy the todo - can  also ue Object.assign\n\t\ttodos[index] = {\n\t\t\t...todos[index],\n\t\t\tdone: event.target.checked,\n\t\t};\n\t\t// update done property on copies\n\t\t// todos[index].done = event.target.checked;\n\t\tconsole.log(todos);\n\t\tthis.setState({\n\t\t\ttodos,\n\t\t});\n\t}\n\n\tallDone() {\n\t\tconst todos = this.state.todos.map((todo) => {\n\t\t\treturn {\n\t\t\t\t// ...todo,\n\t\t\t\ttitle: todo.title, // can also do ...todo\n\t\t\t\tdone: true,\n\t\t\t};\n\t\t});\n\n\t\tthis.setState({\n\t\t\ttodos,\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>{this.state.message}</h1>\n\t\t\t\t{/* statelesss functional components */}\n\t\t\t\t<NewTodoForm\n\t\t\t\t\t// props\n\t\t\t\t\tnewTodo={this.state.newTodo}\n\t\t\t\t\tformSubmitted={this.formSubmitted.bind(this)}\n\t\t\t\t\tnewTodoChanged={this.newTodoChanged.bind(this)}\n\t\t\t\t/>\n\t\t\t\t<button onClick={() => this.allDone()}>All Done</button>\n\t\t\t\t<TodoList\n\t\t\t\t\ttodos={this.state.todos}\n\t\t\t\t\ttoggleTodoDone={this.toggleTodoDone.bind(this)}\n\t\t\t\t\tremoveTodo={this.removeTodo.bind(this)}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}